<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xiandaojia.mapper.usercenter.UserAddressMapper">
	<resultMap id="BaseResultMap" type="com.xiandaojia.common.domain.UserAddress">
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="address_province" property="addressProvince"
			jdbcType="VARCHAR" />
		<result column="address_city" property="addressCity" jdbcType="VARCHAR" />
		<result column="address_area" property="addressArea" jdbcType="VARCHAR" />
		<result column="address_text" property="addressText" jdbcType="VARCHAR" />
		<result column="address_default" property="addressDefault"
			jdbcType="BIT" />
		<result column="user_id" property="userId" jdbcType="VARCHAR" />
		<result column="user_name" property="userName" jdbcType="VARCHAR" />
		<result column="user_phone" property="userPhone" jdbcType="CHAR" />
		<result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
	</resultMap>
	<sql id="Base_Column_List">
		id, address_province, address_city, address_area, address_text,
		address_default,
		user_id, user_name, user_phone, update_time, create_time
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Long">
		select
		<include refid="Base_Column_List" />
		from t_user_address
		where id = #{id,jdbcType=BIGINT}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		delete from t_user_address
		where id = #{id,jdbcType=BIGINT}
	</delete>
	<insert id="insert" parameterType="com.xiandaojia.common.domain.UserAddress">
		insert into t_user_address (id, address_province, address_city,
		address_area, address_text, address_default,
		user_id, user_name, user_phone,
		update_time, create_time)
		values (#{id,jdbcType=BIGINT}, #{addressProvince,jdbcType=VARCHAR},
		#{addressCity,jdbcType=VARCHAR},
		#{addressArea,jdbcType=VARCHAR}, #{addressText,jdbcType=VARCHAR}, #{addressDefault,jdbcType=BIT},
		#{userId,jdbcType=VARCHAR}, #{userName,jdbcType=VARCHAR},
		#{userPhone,jdbcType=CHAR},
		#{updateTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP})
	</insert>
	<insert id="insertSelective" parameterType="com.xiandaojia.common.domain.UserAddress">
		insert into t_user_address
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="addressProvince != null">
				address_province,
			</if>
			<if test="addressCity != null">
				address_city,
			</if>
			<if test="addressArea != null">
				address_area,
			</if>
			<if test="addressText != null">
				address_text,
			</if>
			<if test="addressDefault != null">
				address_default,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="userName != null">
				user_name,
			</if>
			<if test="userPhone != null">
				user_phone,
			</if>
			<if test="updateTime != null">
				update_time,
			</if>
			<if test="createTime != null">
				create_time,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=BIGINT},
			</if>
			<if test="addressProvince != null">
				#{addressProvince,jdbcType=VARCHAR},
			</if>
			<if test="addressCity != null">
				#{addressCity,jdbcType=VARCHAR},
			</if>
			<if test="addressArea != null">
				#{addressArea,jdbcType=VARCHAR},
			</if>
			<if test="addressText != null">
				#{addressText,jdbcType=VARCHAR},
			</if>
			<if test="addressDefault != null">
				#{addressDefault,jdbcType=BIT},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=VARCHAR},
			</if>
			<if test="userName != null">
				#{userName,jdbcType=VARCHAR},
			</if>
			<if test="userPhone != null">
				#{userPhone,jdbcType=CHAR},
			</if>
			<if test="updateTime != null">
				#{updateTime,jdbcType=TIMESTAMP},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.xiandaojia.common.domain.UserAddress">
		update t_user_address
		<set>
			<if test="addressProvince != null">
				address_province = #{addressProvince,jdbcType=VARCHAR},
			</if>
			<if test="addressCity != null">
				address_city = #{addressCity,jdbcType=VARCHAR},
			</if>
			<if test="addressArea != null">
				address_area = #{addressArea,jdbcType=VARCHAR},
			</if>
			<if test="addressText != null">
				address_text = #{addressText,jdbcType=VARCHAR},
			</if>
			<if test="addressDefault != null">
				address_default = #{addressDefault,jdbcType=BIT},
			</if>
			<if test="userId != null">
				user_id = #{userId,jdbcType=VARCHAR},
			</if>
			<if test="userName != null">
				user_name = #{userName,jdbcType=VARCHAR},
			</if>
			<if test="userPhone != null">
				user_phone = #{userPhone,jdbcType=CHAR},
			</if>
			<if test="updateTime != null">
				update_time = #{updateTime,jdbcType=TIMESTAMP},
			</if>
			<if test="createTime != null">
				create_time = #{createTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		where id = #{id,jdbcType=BIGINT}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.xiandaojia.common.domain.UserAddress">
		update t_user_address
		set address_province = #{addressProvince,jdbcType=VARCHAR},
		address_city = #{addressCity,jdbcType=VARCHAR},
		address_area = #{addressArea,jdbcType=VARCHAR},
		address_text = #{addressText,jdbcType=VARCHAR},
		address_default = #{addressDefault,jdbcType=BIT},
		user_id = #{userId,jdbcType=VARCHAR},
		user_name = #{userName,jdbcType=VARCHAR},
		user_phone = #{userPhone,jdbcType=CHAR},
		update_time = #{updateTime,jdbcType=TIMESTAMP},
		create_time = #{createTime,jdbcType=TIMESTAMP}
		where id = #{id,jdbcType=BIGINT}
	</update>

	<select id="getTotalCount" resultType="int">
		select count(1) from
		t_user_address
		where user_id = #{arg0}
	</select>

	<select id="queryListByPage" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from t_user_address
		where user_id = #{arg2}
		ORDER by create_time desc
		limit
		#{arg0}, #{arg1}
	</select>

	<select id="queryList" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from t_user_address
		where user_id = #{arg2}
		ORDER by create_time desc
	</select>
</mapper>